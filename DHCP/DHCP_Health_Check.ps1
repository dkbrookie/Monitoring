###############################################
## Check for DHCP lease remaining percentage ##
###############################################
<#
.Description
If the DHCP server runs out of available leases, the server will no longer be able to serve new
DHCP addresses, which means all DHCP devices looking for a new address will fail to connect to 
the network.
#>
$dhcpStatistics = Get-DhcpServerv4Statistics
If ($dhcpStatistics.PercentageAvailable -lt 5) {
    $dhcpLeaseStatus = 'Failed'
    $logOutput += "Your DHCP pool has under 5% total remaining leases to hand out.`r`n"
    $logOutput += "DHCP Addresses In Use: $($dhcpStatistics.AddressesInUse), DHCP Addresses Available: $($dhcpStatistics.AddressesAvailable)`r`n"
} Else {
    $dhcpLeaseStatus = 'Success'
    $logOutput += "Confirmed DHCP has sufficient available leases.`r`n"
    $logOutput += "DHCP Addresses In Use: $($dhcpStatistics.AddressesInUse), DHCP Addresses Available: $($dhcpStatistics.AddressesAvailable)`r`n"
}


#######################################
## Check for DHCP Conflict Detection ##
#######################################
<#
.Description
If conflict detection is not enabled, the DHCP server can lease out an IP address that is already 
is in use by another device. When conflict detection is enabled, the DHCP Server will ping the 
IP address in question before it leases out the IP address to another requesting a client device. 
If the DHCP server receives a reply from the ping, it will mark the IP address as BAD_ADDRESS and 
will not lease out.
#>
$dhcpSettings = Get-DhcpServerSetting
If ($dhcpSettings.ConflictDetectionAttempts -eq 0) {
    $conflictDetectionStatus = 'Failed'
    $logOutput += "Found DHCP conflict detection is currently disabled.`r`n"
} Else {
    $conflictDetectionStatus = 'Success'
    $logOutput += "Confirmed DHCP conflict deteciton is enabled!`r`n"
}

If ($dhcpLeaseStatus -eq 'Failed') {
    $fixLog += "DHCP Available Leases >5%: This means the DHCP server is running out of available leases. You should check your DHCP lease settings, and you may need to increase the DHCP scope.`r`n"
}
If ($conflictDetectionStatus -eq 'Failed') {
    $fixLog += "DHCP Conflict Detection Disabled: The recommendation is to enable DHCP Conflict Detection. When conflict detection is enabled, the DHCP Server will ping the IP address in question before it leases out the IP address to another requesting a client device. If the DHCP server receives a reply from the ping, it will mark the IP address as BAD_ADDRESS and will not lease out.`r`n"
}

## Gather the latest error and warning eventlogs generated by DHCP-Server
Try {
    If (!((Get-DhcpServerAuditLog).Enable)) {
        Set-DhcpServerAuditLog -Enable $True -MaxMBFileSize 300
        Restart-Service DHCPServer
    }

    $logOutput += "Getting latest DHCP eventlog errors and warnings..."
    $dhcpLogs = Get-WinEvent -FilterHashtable @{ ProviderName = 'Microsoft-Windows-DHCP-Server'; Level = 2,3; StartTime = [datetime]::Today.AddDays(-7) } | Sort-Object Message -Unique | Format-Table -AutoSize -HideTableHeaders -Wrap | Out-String
    If ($dhcpLogs) {
        $logOutput += [string]$dhcpLogs
    } Else {
        $logOutput += "Found 0 error/warning events in the DHCP eventlog.`r`n"
    }
} Catch {
    $logOutput += "There was an issue when trying to gather the latest eventlogs. Error output: $Error`r`n"
    Break
}

"errors=$errorsOut|dhcpLeaseStatus=$dhcpLeaseStatus|conflictDetectionStatus=$conflictDetectionStatus|logOutput=$logOutput|fixLog=$fixLog"

$logOutput = $null
$fixLog = $null



<#
.SYNOPSIS
Get-DhcpServerLog – Reads the Windows DHCP server logs

.DESCRIPTION 
The Windows DHCP server logs are stored in CSV format in C:\Windows\System32\dhcp
It's difficult to read these logs in Notepad due to them being in CSV format. 
By default, this script reads the last 20 lines of the current day's log, and
converts each line into a PSObject.

Additionally, the PSObject will also contain descriptive versions of the ID and QResult fields

.OUTPUTS
A PSObject, output from ConvertFrom-CSV

.EXAMPLE
Get-DhcpServerLog -Lines 100 -GroupEvents No
#>

function Get-DhcpServerLog {
    param(
        [parameter(Position=0,Mandatory=$false)]
        [Alias("count")]
        [int]$Lines = 500,

        [parameter(Position=3,Mandatory=$false)]
        [ValidateSet("Mon","Tue", "Wed", "Thu", "Fri", IgnoreCase=$true)]
        [string]$Day = (get-date).DayOfWeek.ToString().Substring(0,3),

        [parameter(Mandatory=$false)]
        [ValidateSet('Yes','No')]
        [string]$GroupEvents = 'Yes'
    )
    Write-Verbose "Get-DHCPServerLog called with parameters – Lines:$Lines, Day:$Day"

    # CSV header fields, to be used later when converting each line of the tailed log from CSV
    $headerFields = @("ID","Date","Time","Description","IP Address","Host Name","MAC Address","User Name","TransactionID","QResult","Probationtime","CorrelationID","Dhcid","VendorClass(Hex)","VendorClass(ASCII)","UserClass(Hex)","UserClass(ASCII)","RelayAgentInformation","DnsRegError")

    # Translations of the ID field, as per the description inside the log file itself
    $idMeanings = @{ 
        00 = "The log was started.";
        01 = "The log was stopped.";
        02 = "The log was temporarily paused due to low disk space.";
        10 = "A new IP address was leased to a client.";
        11 = "A lease was renewed by a client.";
        12 = "A lease was released by a client.";
        13 = "An IP address was found to be in use on the network.";
        14 = "A lease request could not be satisfied because the scope's address pool was exhausted.";
        15 = "A lease was denied.";
        16 = "A lease was deleted.";
        17 = "A lease was expired and DNS records for an expired leases have not been deleted.";
        18 = "A lease was expired and DNS records were deleted.";
        20 = "A BOOTP address was leased to a client.";
        21 = "A dynamic BOOTP address was leased to a client.";
        22 = "A BOOTP request could not be satisfied because the scope's address pool for BOOTP was exhausted.";
        23 = "A BOOTP IP address was deleted after checking to see it was not in use.";
        24 = "IP address cleanup operation has begun.";
        25 = "IP address cleanup statistics.";
        30 = "DNS update request to the named DNS server.";
        31 = "DNS update failed.";
        32 = "DNS update successful.";
        33 = "Packet dropped due to NAP policy.";
        34 = "DNS update request failed as the DNS update request queue limit exceeded.";
        35 = "DNS update request failed.";
        36 = "Packet dropped because the server is in failover standby role or the hash of the client ID does not match.";
        # Event descriptions for 50-64 sourced from https://technet.microsoft.com/en-us/library/cc776384(v=ws.10).aspx
        50 = "The DHCP server could not locate the applicable domain for its configured Active Directory installation.";
        51 = "The DHCP server was authorized to start on the network.";
        52 = "The DHCP server was recently upgraded to a Windows Server 2003 operating system, and, therefore, the unauthorized DHCP server detection feature (used to determine whether the server has been authorized in Active Directory) was disabled."
        53 = "The DHCP server was authorized to start using previously cached information. Active Directory was not currently visible at the time the server was started on the network.";
        54 = "The DHCP server was not authorized to start on the network. When this event occurs, it is likely followed by the server being stopped.";
        55 = "The DHCP server was successfully authorized to start on the network.";
        56 = "The DHCP server was not authorized to start on the network and was shut down by the operating system. You must first authorize the server in the directory before starting it again.";
        57 = "Another DHCP server exists and is authorized for service in the same domain.";
        58 = "The DHCP server could not locate the specified domain.";
        59 = "A network-related failure prevented the server from determining if it is authorized.";
        60 = "No Windows Server 2003 domain controller (DC) was located. For detecting whether the server is authorized, a DC that is enabled for Active Directory is needed.";
        61 = "Another DHCP server was found on the network that belongs to the Active Directory domain.";
        62 = "Another DHCP server was found on the network.";
        63 = "The DHCP server is trying once more to determine whether it is authorized to start and provide service on the network.";
        64 = "The DHCP server has its service bindings or network connections configured so that it is not enabled to provide service."
    }

    $qResultMeanings = @{0 = "No Quarantine"; 1 = "Quarantine"; 2 = "Drop Packet"; 3 = "Probation"; 6 = "No Quarantine Information"}

    $filePath = "$env:SystemRoot\System32\dhcp\DhcpSrvLog-$Day.log"
    
    Write-Verbose "Attempting to search for DHCP log at location: $filePath"
    if ((Test-Path $filePath) -eq $false) { throw "Couldn't locate DHCP log at $filePath" }

    Write-Verbose "Reading last $Lines lines from DHCP log at location: $filePath"
    $errorEvents = Get-Content $filePath –tail $Lines | ConvertFrom-Csv –Header $headerFields | Select-Object *,@{n="ID Description";e={$idMeanings[[int]::parse($_.ID)]}},@{n="QResult Description";e={$qResultMeanings[[int]::parse($_.QResult)]}}
    ForEach ($errorEvent in $errorEvents) {
        If (14,15,22,31,56,57,58,61,62 -contains $errorEvent.Id) {
            [array]$totalEvents += $errorEvent
        }
    }

    If ($GroupEvents -eq 'Yes') {
        $totalEvents | Sort-Object Id -Unique | Select-Object ID, Date, Time, Description, 'IP Address', 'Host Name', QResult, DnsRegError, 'ID Description'
    } Else {
        $totalEvents | Select-Object ID, Date, Time, Description, 'IP Address', 'Host Name', QResult, DnsRegError, 'ID Description'
    }

    Write-Output "Name is the EventID, and Count is the Total times the event has occured out of the last total 500 events.`r`n"
    $totalEvents.Id | group | Select-Object Name, Count

    If ($totalEvents) {
        $global:createTicket = 'Yes'
    } Else {
        $global:createTicket = 'No'
    }
}